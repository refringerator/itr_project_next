datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id          String          @id @default(uuid()) @db.Uuid
  name        String?
  superuser   Boolean         @default(false)
  collections Collection[]
  items       Item[]
  likes       LikeOnComment[]
  comments    Comment[]
}

model Collection {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  description  String?
  published    Boolean       @default(false)
  authorId     String        @db.Uuid
  author       User          @relation(fields: [authorId], references: [id])
  topicId      Int
  topic        Topic         @relation(fields: [topicId], references: [id])
  items        Item[]
  customFields CustomField[]
}

model Item {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  title        String
  published    Boolean    @default(false)
  authorId     String     @db.Uuid
  author       User       @relation(fields: [authorId], references: [id])
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  tags         Tag[]
  comments     Comment[]
  /// [CustomValuesType]
  customValues Json       @default("[]")
}

model Tag {
  id    Int    @id @default(autoincrement())
  title String @unique
  items Item[]
}

model Comment {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  text      String
  itemId    Int
  item      Item            @relation(fields: [itemId], references: [id])
  authorId  String          @db.Uuid
  author    User            @relation(fields: [authorId], references: [id])
  likes     LikeOnComment[]
}

model LikeOnComment {
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  rating    Int
  createdAt DateTime @default(now())

  @@id(name: "likeId", [userId, commentId])
}

model Topic {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  collections Collection[]
  /// [TranslationType]
  translation Json         @default("[]")
}

model CustomField {
  id           Int             @id @default(autoincrement())
  title        String
  type         CustomFieldType @default(TEXT)
  isFilter     Boolean
  isRequired   Boolean
  collectionId Int
  collection   Collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

enum CustomFieldType {
  INT
  BOOLEAN
  TEXT
  LONGTEXT
  DATE
  LINK
  FILE
}
